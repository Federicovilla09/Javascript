Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve?
  Lugar en memoria donde almacenamos tipos de datos.

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
  En la declaraci√≥n le damos un nombre, en la inicializacion le asignamos el valor.

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
  La diferencia que hay es que al sumar de hace una operacion matematica, y en la concatenacion
  unimos los valores.

¬øCu√°l operador me permite sumar o concatenar?
  El operador para sumar o concatenar, es el operador de suma (+).

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

  Nombre -> strings
  Apellido -> strings
  Nombre de usuario en Platzi -> strings
  Edad -> numero
  Correo electr√≥nico -> strings
  Mayor de edad -> booleano
  Dinero ahorrado -> numero
  Deudas -> numero 

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

  let nombre = "Federico";
  let apellido = "Villanueva";
  let usuario = "FedePlatzi"
  let edad = 31;
  let email = "Fede_12@gmail";
  let mayorEdad = true;
  let dineroAhorrado = 1200;
  let deudas = 200;

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

  Nombre completo (nombre y apellido)

  console.log(`Mi nombre completo es ${nombre} ${apellido}`)
  'Mi nombre completo es Federico Villanueva'

  Dinero real (dinero ahorrado menos deudas)

  console.log(`Mi dinero real es: ${dineroReal}`)
  'Mi dinero real es: 1000'

Funciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
  Bloque de codigo que podemos reutilizar para generar ciertas acciones con los valores
  que se guardaron en memoria

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?

  Cuando necesitamos realizar alguna tarea en donde tengamos entrada y salida de algun procedimiento que el codigo necesite.

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?

  Los par√°metros son los nombres que aparecen en la definici√≥n de una funci√≥n. Los argumentos son los valores que le pasamos (y que, por tanto, recibe) una funci√≥n.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

  const name = "Juan David";
  const lastname = "Castro Gallego";
  const completeName = name + lastname;
  const nickname = "juandc";

  console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

    function completeName(name, lastname){
      return name + " " + lastname
    }

    function saludos(name, lastname, nickname) {
    const completeName = completeName(name, lastname)
    
    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
  } 

    saludos("Fede", "Villanueva", "Fedex)  

Condicionales

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un condicional?
  Reglas para validar si algo es verdadero o falso.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
  Condicional if, else if, else y switch.
  El condicional if nos permite hacer validaciones completamente distintas
  El switch todos los casos se comparan con la misma variable o condicion que definimos.

¬øPuedo combinar funciones y condicionales?
  Si podemos combinar funciones y condicionales.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

  const tipoDeSuscripcion = "Basic";

  switch (tipoDeSuscripcion) {
    case "Free":
        console.log("Solo puedes tomar los cursos gratis");
        break;
    case "Basic":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
        break;
    case "Expert":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
        break;
    case "ExpertPlus":
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
        break;
  }


    const tipoDeSuscripcion = "ExpertPlus";
      if(tipoDeSuscripcion === "Free"){
        console.log("Solo puedes tomar los cursos gratis");
      } else if(tipoDeSuscripcion === "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
      } else if (tipoDeSuscripcion === "Expert"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
      }else if(tipoDeSuscripcion ==="ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
      }else{
        console.log("No es ningun tipo de Suscripcion")
      }

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

  const tipoDeSuscripciones = {
  free: "Solo puedes tomar los cursos gratis",
  basic: "Puedes tomar casi todos los cursos de Platzi durante un mes",
  expert: "Puedes tomar casi todos los cursos de Platzi durante un a√±o",
  expertplus: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
  }
  function
  conseguirtipoDeSuscripcion(suscripcion){
  if(tipoDeSuscripciones[suscripcion]){
    console.log(tipoDeSuscripciones[suscripcion])
    return;
  }
  console.log("Ese tipo de suscrpcion no existe")
}

conseguirtipoDeSuscripcion("free")

Ciclos

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?
  Son utilizados para realizar tareas repetitivas con base en una condici√≥n.

¬øQu√© tipos de ciclos existen en JavaScript?
  Existe en ciclo while, Do while, for y for each.

¬øQu√© es un ciclo infinito y por qu√© es un problema?
  Es un error que consiste en realizar un ciclo que se repite de forma indefinida ya que su condici√≥n para finalizar nunca se cumple. 

¬øPuedo mezclar ciclos y condicionales?
  Si, aunque los cilcos son condicionales, nada nos impide agregar mas condicionales dentro del ciclo.

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

    let i = 0
  while( i < 5) {
    i++;
      console.log("El valor de i es: " + i);
  }

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

    let i = 10;
  while(i >= 2){
    i--;
    console.log("El valor de i es: " + i);
  }


3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

let respuesta;
while(respuesta != "4") {
  let pregunta = prompt("¬øCuantos es 2 + 2?")
  respuesta = pregunta;
}

Listas

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?
  Es una estructura de datos que guarda mas valores adentro

¬øQu√© es un objeto?
  Es una coleccion de datos relacionados o contenedor de propiedades.

¬øCu√°ndo es mejor usar objetos o arrays?
  Los arrays se usan para series que poseen valores simples, mientras que los objetos son utilizadas para las series en que hay distintos objetos y propiedades con diferentes valores.

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?

  Si, los arrays pueden guardar objetos. Y los objetos pueden guardar arrays entre propiedades.

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

  function miArray(){
  console.log(frutas[0])
  let frutas =["manzana", "frutilla", "banana"]
  }
  frutas[0]

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

    let autos = ["auto1", "auto2", "auto3"]
  function misAutos(auto){
    console.log(`Estos son mis autos: ${auto}` )
  }
  for (let i = 0; i < autos.length; i++){
    misAutos(autos[i])
  }

  'Estos son mis autos: auto1'
  'Estos son mis autos: auto2'
  'Estos son mis autos: auto3'

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

  function imprimerELemento (obj){
    const arr = Object.values(obj);
    for (let i = 0; i < arr.length; i++){
      console.log(arr[i])
    }
  }
  imprimerELemento (obj)